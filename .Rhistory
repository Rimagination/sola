# 定义 DayOfYear 函数
DayOfYear <- function(DateTime) {
return(as.numeric(format(as.POSIXlt(DateTime), "%j")))
}
# 示例调用
DayOfYear(Sys.time())
# 定义 DayOfYear 函数
DayOfYear <- function(DateTime) {
return(as.numeric(format(as.POSIXlt(DateTime), "%j")))
}
# 定义简洁的太阳辐射转换函数
solar_radiation <- function(sunshine, latitude, date, use_gpu = FALSE) {
Gsc <- 1367  # 太阳常数，单位：W/m^2
# 使用 DayOfYear 函数计算 day_of_year
day_of_year <- DayOfYear(date)
# 判断是否使用GPU
if (use_gpu) {
# 将输入数据转换为GPU矩阵
sunshine_gpu <- gpu.matrix(sunshine)
latitude_gpu <- gpu.matrix(latitude)
day_of_year_gpu <- gpu.matrix(day_of_year)
# 计算日地距离修正因子
dr_gpu <- 1 + 0.033 * cos(2 * pi * day_of_year_gpu / 365)
# 计算太阳赤纬角
delta_gpu <- 0.409 * sin(2 * pi * day_of_year_gpu / 365 - 1.39)
# 计算纬度的弧度值
phi_gpu <- pi / 180 * latitude_gpu
# 计算日出时角
omega_s_gpu <- acos(-tan(phi_gpu) * tan(delta_gpu))
# 计算太阳辐射 Ra
Ra_gpu <- 24 * 60 / pi * Gsc * dr_gpu * (omega_s_gpu * sin(phi_gpu) * sin(delta_gpu) +
cos(phi_gpu) * cos(delta_gpu) * sin(omega_s_gpu))
# 计算相对日照
N_gpu <- 24 * omega_s_gpu / pi
# 假设的转换因子
as <- 0.09
bs <- 0.25
# 计算太阳辐射 Rs 使用 GPU
Rs_gpu <- (as + bs * sunshine_gpu / N_gpu) * Ra_gpu
return(as.matrix(Rs_gpu))  # 转换为普通矩阵返回
} else {
# 不使用 GPU 的普通计算
dr <- 1 + 0.033 * cos(2 * pi * day_of_year / 365)
delta <- 0.409 * sin(2 * pi * day_of_year / 365 - 1.39)
phi <- pi / 180 * latitude
omega_s <- acos(-tan(phi) * tan(delta))
Ra <- 24 * 60 / pi * Gsc * dr * (omega_s * sin(phi) * sin(delta) +
cos(phi) * cos(delta) * sin(omega_s))
N <- 24 * omega_s / pi
as <- 0.09
bs <- 0.25
Rs <- (as + bs * sunshine / N) * Ra
return(Rs)  # 返回普通计算结果
}
}
# 示例调用
sunshine <- c(5, 6, 7)         # 日照时数
latitude <- c(35, 36, 37)      # 纬度
date <- Sys.time() + c(0, 86400 * 50, 86400 * 100)  # 当前时间 + 50天 + 100天
# 不使用 GPU
solar_radiation(sunshine, latitude, date, use_gpu = FALSE)
# 使用 GPU
solar_radiation(sunshine, latitude, date, use_gpu = TRUE)
library(GPUmatrix)
install.packages("torch")
library(torch)
install_torch() # In some cases is required.
?torch
??torch
library(torch)
install_torch() # In some cases is required.
library(GPUmatrix)
# 判断是否使用GPU
if (use_gpu) {
library(GPUmatrix)
# 将输入数据转换为GPU矩阵
sunshine_gpu <- gpu.matrix(sunshine)
latitude_gpu <- gpu.matrix(latitude)
day_of_year_gpu <- gpu.matrix(day_of_year)
# 计算日地距离修正因子
dr_gpu <- 1 + 0.033 * cos(2 * pi * day_of_year_gpu / 365)
# 计算太阳赤纬角
delta_gpu <- 0.409 * sin(2 * pi * day_of_year_gpu / 365 - 1.39)
# 计算纬度的弧度值
phi_gpu <- pi / 180 * latitude_gpu
# 计算日出时角
omega_s_gpu <- acos(-tan(phi_gpu) * tan(delta_gpu))
# 计算太阳辐射 Ra
Ra_gpu <- 24 * 60 / pi * Gsc * dr_gpu * (omega_s_gpu * sin(phi_gpu) * sin(delta_gpu) +
cos(phi_gpu) * cos(delta_gpu) * sin(omega_s_gpu))
# 计算相对日照
N_gpu <- 24 * omega_s_gpu / pi
# 假设的转换因子
as <- 0.09
bs <- 0.25
# 计算太阳辐射 Rs 使用 GPU
Rs_gpu <- (as + bs * sunshine_gpu / N_gpu) * Ra_gpu
return(as.matrix(Rs_gpu))  # 转换为普通矩阵返回
} else {
# 不使用 GPU 的普通计算
dr <- 1 + 0.033 * cos(2 * pi * day_of_year / 365)
delta <- 0.409 * sin(2 * pi * day_of_year / 365 - 1.39)
phi <- pi / 180 * latitude
omega_s <- acos(-tan(phi) * tan(delta))
Ra <- 24 * 60 / pi * Gsc * dr * (omega_s * sin(phi) * sin(delta) +
cos(phi) * cos(delta) * sin(omega_s))
N <- 24 * omega_s / pi
as <- 0.09
bs <- 0.25
Rs <- (as + bs * sunshine / N) * Ra
return(Rs)  # 返回普通计算结果
}
# 定义 DayOfYear 函数
DayOfYear <- function(DateTime) {
return(as.numeric(format(as.POSIXlt(DateTime), "%j")))
}
# 定义简洁的太阳辐射转换函数
solar_radiation <- function(sunshine, latitude, date, use_gpu = FALSE) {
Gsc <- 1367  # 太阳常数，单位：W/m^2
# 使用 DayOfYear 函数计算 day_of_year
day_of_year <- DayOfYear(date)
# 判断是否使用GPU
if (use_gpu) {
library(GPUmatrix)
# 将输入数据转换为GPU矩阵
sunshine_gpu <- gpu.matrix(sunshine)
latitude_gpu <- gpu.matrix(latitude)
day_of_year_gpu <- gpu.matrix(day_of_year)
# 计算日地距离修正因子
dr_gpu <- 1 + 0.033 * cos(2 * pi * day_of_year_gpu / 365)
# 计算太阳赤纬角
delta_gpu <- 0.409 * sin(2 * pi * day_of_year_gpu / 365 - 1.39)
# 计算纬度的弧度值
phi_gpu <- pi / 180 * latitude_gpu
# 计算日出时角
omega_s_gpu <- acos(-tan(phi_gpu) * tan(delta_gpu))
# 计算太阳辐射 Ra
Ra_gpu <- 24 * 60 / pi * Gsc * dr_gpu * (omega_s_gpu * sin(phi_gpu) * sin(delta_gpu) +
cos(phi_gpu) * cos(delta_gpu) * sin(omega_s_gpu))
# 计算相对日照
N_gpu <- 24 * omega_s_gpu / pi
# 假设的转换因子
as <- 0.09
bs <- 0.25
# 计算太阳辐射 Rs 使用 GPU
Rs_gpu <- (as + bs * sunshine_gpu / N_gpu) * Ra_gpu
return(as.matrix(Rs_gpu))  # 转换为普通矩阵返回
} else {
# 不使用 GPU 的普通计算
dr <- 1 + 0.033 * cos(2 * pi * day_of_year / 365)
delta <- 0.409 * sin(2 * pi * day_of_year / 365 - 1.39)
phi <- pi / 180 * latitude
omega_s <- acos(-tan(phi) * tan(delta))
Ra <- 24 * 60 / pi * Gsc * dr * (omega_s * sin(phi) * sin(delta) +
cos(phi) * cos(delta) * sin(omega_s))
N <- 24 * omega_s / pi
as <- 0.09
bs <- 0.25
Rs <- (as + bs * sunshine / N) * Ra
return(Rs)  # 返回普通计算结果
}
}
# 示例调用
sunshine <- c(5, 6, 7)         # 日照时数
latitude <- c(35, 36, 37)      # 纬度
date <- Sys.time() + c(0, 86400 * 50, 86400 * 100)  # 当前时间 + 50天 + 100天
# 不使用 GPU
solar_radiation(sunshine, latitude, date, use_gpu = FALSE)
# 使用 GPU
solar_radiation(sunshine, latitude, date, use_gpu = TRUE)
??dayofyear
dayOfYear <- function(input) {
# Check if the input is a vector of 'Date' or 'POSIXct' objects
if (!is.vector(input) || !(all(inherits(input, "Date")) || all(inherits(input, "POSIXct")))) {
stop("Input must be a 'Date' or 'POSIXct' value or a vector of such values.")
}
# If the input is 'POSIXct', convert it to 'Date'
if (inherits(input, "POSIXct")) {
input <- as.Date(input)
}
# Calculate and return the day of the year
return(as.numeric(format(input, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(input) {
# Check if the input is a 'Date' or 'POSIXct' object or a vector of such objects
if (!inherits(input, "Date") && !inherits(input, "POSIXct") && !is.vector(input)) {
stop("Input must be a 'Date' or 'POSIXct' value, or a vector of such values.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(input)) {
input <- as.vector(input)
}
# If the input is 'POSIXct', convert it to 'Date'
if (inherits(input, "POSIXct")) {
input <- as.Date(input)
}
# Calculate and return the day of the year
return(as.numeric(format(input, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(input) {
# Check if the input is a 'Date' or 'POSIXct' object or a vector of such objects
if (!inherits(input, "Date") && !inherits(input, "POSIXct") && !is.vector(input)) {
stop("Input must be a 'Date' or 'POSIXct' value, or a vector of such values.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(input)) {
input <- as.vector(input)
}
# If the input is 'POSIXct', convert it to 'Date'
if (inherits(input, "POSIXct")) {
input <- as.Date(input)
}
# Calculate and return the day of the year
return(as.numeric(format(input, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(input) {
# Check if the input is a 'Date' or 'POSIXct' object or a vector of such objects
if (!inherits(input, "Date") && !inherits(input, "POSIXct") && !is.vector(input)) {
stop("Input must be a 'Date' or 'POSIXct' value, or a vector of such values.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(input)) {
input <- as.vector(input)
}
# If the input is 'POSIXct', convert it to 'Date'
if (inherits(input, "POSIXct")) {
input <- as.Date(input)
}
# Calculate and return the day of the year
return(as.numeric(format(input, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(input) {
# Check if the input is a 'Date' or 'POSIXct' object or a vector of such objects
if (!inherits(input, "Date") && !inherits(input, "POSIXct") && !is.vector(input)) {
stop("Input must be a 'Date' or 'POSIXct' value, or a vector of such values.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(input)) {
input <- as.vector(input)
}
# If the input is 'POSIXct', convert it to 'Date'
if (inherits(input, "POSIXct")) {
input <- as.Date(input)
}
# Calculate and return the day of the year
return(as.numeric(format(input, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
day_of_year_single <- dayOfYear("2023-03-15")
dayOfYear <- function(dat) {
# Validate input type
if (!inherits(dat, "Date") && !inherits(dat, "POSIXct") && !is.vector(dat)) {
stop("The 'dat' parameter must be a 'Date' or 'POSIXct' object, or a vector of such objects.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(dat)) {
dat <- as.vector(dat)
}
# Convert 'POSIXct' to 'Date' if necessary
if (inherits(dat, "POSIXct")) {
dat <- as.Date(dat)
}
# Calculate and return the day of the year
return(as.numeric(format(dat, "%j")))
}
day_of_year_single <- dayOfYear("2023-03-15")
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(dat) {
# Validate input type
if (!inherits(dat, "Date") && !inherits(dat, "POSIXct")) {
stop("The 'dat' parameter must be a 'Date' or 'POSIXct' object.")
}
# Calculate and return the day of the year
return(as.numeric(format(dat, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(dat) {
# Validate input type
if (!inherits(dat, "Date") && !inherits(dat, "POSIXct") && !is.vector(dat)) {
stop("The 'dat' parameter must be a 'Date' or 'POSIXct' object, or a vector of such objects.")
}
# If the input is not a vector, convert it to a vector
if (!is.vector(dat)) {
dat <- as.vector(dat)
}
# Convert 'POSIXct' to 'Date' if necessary
if (inherits(dat, "POSIXct")) {
dat <- as.Date(dat)
}
# Calculate and return the day of the year
return(as.numeric(format(dat, "%j")))
}
day_of_year_single <- dayOfYear(as.Date("2023-03-15"))
?dayOfYear
?dayOfYear
?dayOfYear
# Vector of `Date` objects
dates <- dayOfYear(as.Date(c("2023-01-01", "2023-03-15", "2023-12-31")))
# Single `POSIXct` object
time <- dayOfYear(as.POSIXct("2023-03-15 12:00:00"))
# Single `Date` object
date <- dayOfYear(as.Date("2023-03-15"))
dayOfYear <- function(dat) {
# Check if input is valid: must be Date or POSIXct type
if (!inherits(dat, c("Date", "POSIXct"))) {
stop("The 'dat' parameter must be a 'Date' or 'POSIXct' object or a vector of such objects.")
}
# Convert to day of the year
return(as.numeric(format(dat, "%j")))
}
# Single `Date` object
date <- dayOfYear(as.Date("2023-03-15"))
print(date)
time <- dayOfYear(as.POSIXct("2023-03-15 12:00:00"))
print(time)
times <- dayOfYear(as.POSIXct(c("2023-01-01 00:00:00", "2023-03-15 12:00:00", "2023-12-31 23:59:59")))
print(times)
?doy
# Single `Date` object
date <- doy(as.Date("2023-03-15"))
?doy
# Single `Date` object
date <- doy(as.Date("2023-03-15"))
# Single `Date` object
date <- sola::doy(as.Date("2023-03-15"))
usethis::use_function()
